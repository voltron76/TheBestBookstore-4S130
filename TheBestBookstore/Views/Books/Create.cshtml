@model TheBestBookstore.Models.BookViewModel

@{
    ViewData["Title"] = "Create Book";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h2 class="text-center mb-4">@ViewData["Title"]</h2>

            <div class="row mb-4">
                <div class="col">
                    <h4>Search Book Information</h4>
                    <div class="input-group">
                        <input type="text" id="searchQuery" class="form-control" placeholder="Search by title, author, or ISBN...">
                        <button class="btn btn-primary" id="searchButton">Search</button>
                    </div>
                    <div id="statusMessage" class="alert alert-info mt-2" style="display:none"></div>
                    <div id="searchResults" class="border rounded mt-2 max-height-300 overflow-auto" style="display:none"></div>
                </div>
            </div>

            <div class="card shadow">
                <div class="card-body">
                    <form asp-action="Create" asp-controller="Books" method="post" enctype="multipart/form-data" id="createBookForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="Title" class="control-label"></label>
                            <input asp-for="Title" class="form-control" id="bookTitle" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="Author" class="control-label"></label>
                            <input asp-for="Author" class="form-control" id="bookAuthor" />
                            <span asp-validation-for="Author" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="Description" class="control-label"></label>
                            <textarea asp-for="Description" class="form-control" rows="4" id="bookDescription"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="ISBN" class="control-label"></label>
                            <input asp-for="ISBN" class="form-control" id="bookISBN" />
                            <span asp-validation-for="ISBN" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="CategoryId" class="control-label">Category</label>
                            <select asp-for="CategoryId" class="form-select" asp-items="ViewBag.CategoryId" id="bookCategory">
                                <option value="">-- Select Category --</option>
                            </select>
                            <span asp-validation-for="CategoryId" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="Published" class="control-label"></label>
                            <input asp-for="Published" class="form-control" type="date" id="bookPublished" />
                            <span asp-validation-for="Published" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="Pages" class="control-label"></label>
                            <input asp-for="Pages" class="form-control" type="number" id="bookPages" />
                            <span asp-validation-for="Pages" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="Price" class="control-label"></label>
                            <input asp-for="Price" class="form-control" type="number" step="0.01" id="bookPrice" />
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>
                        
                        <div class="form-check mb-3">
                            <input asp-for="IsBestSeller" class="form-check-input" id="bookIsBestseller" />
                            <label asp-for="IsBestSeller" class="form-check-label"></label>
                        </div>
                        
                        <div class="form-group mb-3">
                            <label asp-for="ImageUrl" class="control-label">Cover Image URL</label>
                            <input asp-for="ImageUrl" class="form-control" id="bookImageUrl" />
                            <span asp-validation-for="ImageUrl" class="text-danger"></span>
                        </div>
                        
                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-primary">Create</button>
                            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="searchResult"></div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        const searchInput = $('#searchQuery');
        const searchButton = $('#searchButton');
        const resultsContainer = $('#searchResults');
        const statusMessage = $('#statusMessage');

        function showStatus(message) {
            statusMessage.text(message).show();
        }

        searchButton.click(function(e) {
            e.preventDefault();
            const query = searchInput.val().trim();
            if (!query) {
                showStatus('Please enter a search term');
                return;
            }

            showStatus('Searching...');
            
            $.ajax({
                url: `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}`,
                method: 'GET',
                dataType: 'json',
                success: function(data) {
                    if (!data.items || data.items.length === 0) {
                        showStatus('No books found');
                        return;
                    }
                    displayResults(data.items);
                },
                error: function(err) {
                    console.error('Search error:', err);
                    showStatus('Error searching books. Please try again.');
                }
            });
        });

        function displayResults(books) {
            resultsContainer.empty();
            resultsContainer.show();
            
            books.forEach(book => {
                const info = book.volumeInfo;
                const resultItem = $('<div>')
                    .addClass('book-result p-2 border-bottom cursor-pointer')
                    .data('book-id', book.id)
                    .html(`
                        <h5>${info.title}</h5>
                        <p class="mb-1">${info.authors ? info.authors.join(', ') : 'Unknown author'}</p>
                        <small>${info.publishedDate || 'Date unknown'}</small>
                    `);
                
                resultsContainer.append(resultItem);
            });
            
            resultsContainer.show();
            showStatus(`Found ${books.length} books. Click on a book to auto-fill the form.`);
            
            $('.book-result').click(function(e) {
                e.preventDefault();
                const bookId = $(this).data('book-id');
                fetchBookDetails(bookId);
            });
        }

        function fetchBookDetails(bookId) {
            showStatus('Loading book details...');
            
            $.ajax({
                url: `https://www.googleapis.com/books/v1/volumes/${bookId}`,
                method: 'GET',
                dataType: 'json',
                success: function(data) {
                    fillBookForm(data);
                    resultsContainer.hide();
                    showStatus('Form filled with book data. Make any needed adjustments before saving.');
                },
                error: function(err) {
                    console.error('Error fetching book details:', err);
                    showStatus('Error loading book details. Please try again.');
                }
            });
        }

        function fillBookForm(book) {
            const info = book.volumeInfo;
            $('#bookTitle').val(info.title || '');
            $('#bookAuthor').val(info.authors ? info.authors.join(', ') : '');
            $('#bookDescription').val(info.description || '');
            $('#bookISBN').val(info.industryIdentifiers ? 
                info.industryIdentifiers.find(id => id.type === 'ISBN_13')?.identifier || 
                info.industryIdentifiers[0]?.identifier || '' : '');
            if (info.categories && info.categories.length > 0) {
                const categoryName = info.categories[0].toLowerCase();
                $('#bookCategory option').each(function() {
                    const option = $(this);
                    if (option.text().toLowerCase().includes(categoryName) || 
                        categoryName.includes(option.text().toLowerCase())) {
                        $('#bookCategory').val(option.val());
                        return false;
                    }
                });
            }
            if (info.publishedDate) {
                let dateStr = info.publishedDate;
                if (dateStr.length === 4) {
                    dateStr += '-01-01'; // If only year, set to Jan 1
                } else if (dateStr.length === 7) {
                    dateStr += '-01'; // If only year and month, set to 1st
                }
                try {
                    const date = new Date(dateStr);
                    if (!isNaN(date.getTime())) {
                        const formattedDate = date.toISOString().split('T')[0];
                        $('#bookPublished').val(formattedDate);
                    }
                } catch (e) {
                    console.warn('Could not parse date:', info.publishedDate);
                }
            }
            $('#bookPages').val(info.pageCount || '');
            $('#bookPrice').val('19.99');
            if (info.averageRating && info.averageRating >= 4.0) {
                $('#bookIsBestseller').prop('checked', true);
            }
            if (info.imageLinks) {
                const imageUrl = info.imageLinks.thumbnail || info.imageLinks.smallThumbnail;
                if (imageUrl) {
                    $('#bookImageUrl').val(imageUrl.replace('http://', 'https://'));
                }
            }
        }

        $(document).ready(function(){
            $('#ISBN').on('keyup', function(){
                var isbn = $(this).val();
                if(isbn.length > 3) {
                    $.ajax({
                        url: '@Url.Action("SearchBook", "Books")',
                        type: 'GET',
                        data: { isbn: isbn },
                        success: function(result){
                            $('#searchResult').html(result);
                        }
                    });
                } else {
                    $('#searchResult').empty();
                }
            });
        });
    </script>
}